#yellow, mean = 0, variance = 5.0
lines(ecdf(rnorm(10000, sd = sqrt(5.0))), col="yellow")
#green, mean = -2, variance = 0.5
lines(ecdf(rnorm(10000, mean = -2, sd = sqrt(0.2))), col="green")
abline(v=0)
plot(ecdf(rnorm(10000, sd = sqrt(0.2))), col="blue", xlim=c(-6,6))
#red, mean = 0, variance = 1.0
lines(ecdf(rnorm(10000, sd = sqrt(1.0))), col="red")
#yellow, mean = 0, variance = 5.0
lines(ecdf(rnorm(10000, sd = sqrt(5.0))), col="yellow")
#green, mean = -2, variance = 0.5
lines(ecdf(rnorm(10000, mean = -2, sd = sqrt(0.2))), col="green")
abline(v=0)
legend(x = -6, y = 1)
?legend
legend(x = -6, y = 1, c("Mean = 0, Var = 0.2"), col = c('blue'))
?legend
legend(x = -6, y = 1, c("Mean = 0, Var = 0.2"), col = c('blue'), lty=2)
legend(x = -6, y = 1, c("Mean = 0, Var = 0.2"), col = c('blue'), lty=1)
legend(x = -6, y = 1, c("Mean = 0, Var = 0.2",
"Mean = 0, Var = 1.0",
legend(x = -6, y = 1, c("Mean = 0, Var = 0.2",
"Mean = 0, Var = 1.0",
"Mean = 0, Var = 5.0",
"Mean = -2, Var = 0.5"), col = c('blue', 'red', 'yellow', 'green'), lty=1)
?legend
density(rpois(10000, lambda = 2))
plot(density(rpois(10000, lambda = 2)))
hist(rpois(10000, lambda = 2))
hist(rpois(10000, lambda = 2), freq = T)
hist(rpois(10000, lambda = 2), freq = F)
rpois(10, 2)
rpois(100, 2)
hist(rpois(100,2))
table(rpois(10000, 2)==3)
1729/10000
table(rpois(100000, 2)==3)
hist(rpois(10000,2))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
364*364/365
prod(1:10)
prod(1:2)
prod(1:3)
factorial(3)
factorial(10)
364:364
1-364/365
second <- function(n,k){
factorial(n) / (factorial(n-k) * n^k)
}
second(365,2)
second <- function(n,k){
factorial(n) / ((factorial(n-k) * n^k))
}
second(365,2)
second <- function(n,k){
(factorial(n)) / ((factorial(n-k) * (n**k)))
}
second(365,2)
365^23
365!
factorial(365) / factorial(363) * 365^2
(365 * 364) / 365^2
1- (365 * 364) / 365^2
second <- function(n,k){
1 - (factorial(n) / (factorial(n-k) * n^k))
}
second(365,2)
second <- function(n,k){
(factorial(n)) / (factorial(n-k)) * (n^k)
}
second(365,2)
factorial(365)
perm_without_replacement <- function(n, r){
return(factorial(n)/factorial(n - r))
}
perm_without_replacement(2,2)
perm_without_replacement(10,2)
perm_without_replacement(365,2)
q()
dpois(x = 3, lambda = 2)
dpois(x = 10, lambda = 10)
for (lambda in 1:10){
print lambda
}
for (lambda in 1:10){
print(lambda)
}
my_mean <- 10
for (lambda in 1:10){
dpois(x=my_mean, lambda=lambda)
}
my_mean <- 10
my_max  <- 20
my_prob <- array()
for (lambda in 1:my_max){
p <- dpois(x=my_mean, lambda=lambda)
my_prob[lambda] <- p
}
my_prob
barplot(my_prob)
names(my_prob) <- 1:my_max
barplot(my_prob)
barplot(my_prob,
las=2)
density(my_prob)
plot(density(my_prob))
hist(my_prob)
hist(my_prob, breaks=20)
my_prob
barplot(my_prob,
las=2)
my_mean <- 100
my_max  <- 200
my_prob <- array()
for (lambda in 1:my_max){
p <- dpois(x=my_mean, lambda=lambda)
my_prob[lambda] <- p
}
names(my_prob) <- 1:my_max
barplot(my_prob,
las=2)
ppois(q = 2, lambda = 3)
ppois(q = 2, lambda = 3, lower.tail = F)
dpois(x = 2, lambda = 3)
pnorm(27.4, mean=50, sd=20)
qnorm(0.95, mean=100, sd=15)
qnorm(0.50, mean=100, sd=15)
x <- rnorm(1000, mean=100, sd=15)
hist(x, probability=TRUE)
xx <- seq(min(x), max(x), length=100)
lines(xx, dnorm(xx, mean=100, sd=15))
xx
x
xx
dnorm(xx, mean=100, sd=15)
head(xx)
dnorm(47.26269, 100, 15)
xx
plot(1:10)
lines(1:10,1:10)
plot(1:10)
lines(1:10)
plot(1:10)
lines(c(2,6,10), c(2,6,10))
lines(c(2,6,10), c(4,6,4))
x <- rnorm(1000, mean=100, sd=15)
hist(x, probability=TRUE)
xx <- seq(min(x), max(x), length=100)
lines(xx, dnorm(xx, mean=100, sd=15))
q()
26^3
q()
15 % 5
15 %% 5
3 %% 10
??modulus
3 \% 10
3 %% 10
3 % 10
?%
??%
?modulus
??modulus
3 %/% 10
5 %% 10
5 % 10
10 %% 5
10 %% 3
10 / 3
3 / 10
10 / 3
gcd <- function(u,v){
u + v;
}
gcd(1,1)
gcd <- function(u,v){
while(v != 0){
w = u %% v;
u = v;
v = w;
}
return(u);
}
gcd(10,15)
gcd(15,10)
10 %% 15
10 / 15
15 %% 15
16 %% 15
gcd(10,15)
gcd(15,10)
gcd(150,100)
gcd(20,20)
gcd(99,121)
gcd(144,24)
reverse <- function(x){
l <- length(x);
return(l)
}
reverse(1234)
length(1234)
??Length
library(stringr)
str_length(1234)
library(stringr)
reverse <- function(x){
l <- str_length(x);
return(l)
}
reverse(1234)
?require
reverse <- function(x){
require(stringr)
l <- str_length(x);
for(i in 1:l){
print(i);
}
return(l)
}
reverse(1234)
123 %% 10
reverse <- function(x){
require(stringr)
l <- str_length(x);
for(i in 1:l){
r <- x %% 10;
print(r);
}
return(l)
}
reverse(1234)
integer(10.2)
?interger
?integer
1234 / 10
as.integer(1234 / 10)
reverse <- function(x){
require(stringr)
l <- str_length(x);
for(i in 1:l){
r <- x %% 10;
print(r);
x <- as.integer(x/10)
}
}
reverse(1234)
reverse <- function(x){
require(stringr)
l <- str_length(x);
n <- vector();
for(i in 1:l){
r <- x %% 10;
print(r);
x <- as.integer(x/10)
n <- paste(n, r, sep='')
}
return(n)
}
reverse(1234)
reverse <- function(x){
require(stringr)
l <- str_length(x);
n <- vector();
for(i in 1:l){
r <- x %% 10;
x <- as.integer(x/10)
n <- paste(n, r, sep='')
}
return(as.integer(n))
}
reverse(1234)
reverse(39483)
q()
q()
?exp
exp(2)
exp(1)
q()
39708/(39708+63093)
q()
2.5^2
60.59/sqrt(6)
population <- rnorm(n = 100000, mean = 300, sd = 50)
sample(x = population, size = 6, replace = FALSE)
mylist <- list() #create an empty list
for (i in 1:5) {
vec <- numeric(5) #preallocate a numeric vector
for (j in 1:5) { #fill the vector
vec[j] <- i^j
}
mylist[[i]] <- vec #put all vectors in the list
}
df <- do.call("rbind",mylist) #combine all vectors into a matrix
df
class(df)
vec <- numeric(5)
vec
q()
1/0.00001
1/0.000000001
head(iris)
head(cars)
table(cars$speed < 5)
table(cars$speed >6)
table(cars$speed, cars$dist)
datasets()
data
data()
head(ChickWeight)
table(ChickWeight$Time, ChickWeight$Diet)
table(ChickWeight$Chick)
mosiacplot(table(ChickWeight$Time, ChickWeight$Diet))
mosaicplot(table(ChickWeight$Time, ChickWeight$Diet))
q()
??modulus
2 %% 5
2/5
q()
library(slidify)
library(FANTOM3and4CAGE)
?FANTOM3and4CAGE
??FANTOM3and4CAGE
browseVignettes(FANTOM3and4CAGE)
data(FANTOMtissueCAGEhuman)
names(FANTOMtissueCAGEhuman)
lung_group <- FANTOMtissueCAGEhuman[["lung"]]
class(lung_group)
head(lung_group)
dim(lung_group)
source("http://bioconductor.org/biocLite.R")
biocLite()
q()
y1 <- c(18.2, 20.1, 17.6, 16.8, 18.8, 19.7, 19.1)
y2 <- c(17.4, 18.7, 19.1, 16.4, 15.9, 18.4, 17.7)
y3 <- c(15.2, 18.8, 17.7, 16.5, 15.9, 17.1, 16.7)
y <- (y1, y2, y3)
group <- factor(rep(1:3, rep(7,3)))
y
y3
y1 <- c(18.2, 20.1, 17.6, 16.8, 18.8, 19.7, 19.1)
y2 <- c(17.4, 18.7, 19.1, 16.4, 15.9, 18.4, 17.7)
y3 <- c(15.2, 18.8, 17.7, 16.5, 15.9, 17.1, 16.7)
y <- c(y1, y2, y3)
group <- factor(rep(1:3, rep(7,3)))
group
data <- data.frame(y = y, group = group)
fit <- lm (y ~ group, data)
anova(fit)
scores <- c(25, 29, 14, 11, 11, 6, 22, 18, 17, 20, 5, 2)
school <- factor(c("A", "A", "A", "A", "B", "B", "B", "B", "C", "C", "C", "C"))
teacher <- factor(c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6))
teacher2 <- factor(c(1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2))  # This is the way the data is coded for problems in the book
boxplot(scores ~ school)
boxplot(scores ~ teacher)
boxplot(scores ~ school:teacher2)
c('1.119','1.2996','1.5407','1.5084','1.6181','1.5962','1.2617','1.2288','1.3471','1.0206')
c('1.045','1.1418','1.2569','0.6191','1.4823','0.8991','0.8365','1.2898','1.1821','0.9177')
c('0.9873','0.9873','0.8714','0.9452','1.1186','1.2909','1.1502','1.1635','1.151','0.9367')
c('1.3883','1.104','1.1581','1.319','1.1803','0.8738','1.387','1.301','1.3925','1.0832')
c('1.3952','0.9714','1.3972','1.5369','1.3727','1.2909','1.1874','1.1374','1.0647','0.9486')
c('1.2574','1.0295','1.1941','1.0759','1.3249','0.9494','1.1041','1.1575','1.294','1.4543')
a <- c('1.119','1.2996','1.5407','1.5084','1.6181','1.5962','1.2617','1.2288','1.3471','1.0206')
b <- c('1.045','1.1418','1.2569','0.6191','1.4823','0.8991','0.8365','1.2898','1.1821','0.9177')
c <- c('0.9873','0.9873','0.8714','0.9452','1.1186','1.2909','1.1502','1.1635','1.151','0.9367')
d <- c('1.3883','1.104','1.1581','1.319','1.1803','0.8738','1.387','1.301','1.3925','1.0832')
e <- c('1.3952','0.9714','1.3972','1.5369','1.3727','1.2909','1.1874','1.1374','1.0647','0.9486')
f <- c('1.2574','1.0295','1.1941','1.0759','1.3249','0.9494','1.1041','1.1575','1.294','1.4543')
a
b
data
group <- factor(rep(1:3, rep(7,3)))
group
rep(7,3)
group <- factor(rep(1:6, rep(10,6))
)
group
data <- data.frame(x = all, group = group)
a <- c('1.119','1.2996','1.5407','1.5084','1.6181','1.5962','1.2617','1.2288','1.3471','1.0206')
b <- c('1.045','1.1418','1.2569','0.6191','1.4823','0.8991','0.8365','1.2898','1.1821','0.9177')
c <- c('0.9873','0.9873','0.8714','0.9452','1.1186','1.2909','1.1502','1.1635','1.151','0.9367')
d <- c('1.3883','1.104','1.1581','1.319','1.1803','0.8738','1.387','1.301','1.3925','1.0832')
e <- c('1.3952','0.9714','1.3972','1.5369','1.3727','1.2909','1.1874','1.1374','1.0647','0.9486')
f <- c('1.2574','1.0295','1.1941','1.0759','1.3249','0.9494','1.1041','1.1575','1.294','1.4543')
all <- c(a, b, c, d, e, f)
group <- factor(rep(1:6, rep(10,6)))
data <- data.frame(x = all, group = group)
data
rat <- factor(rep(c('a','b','c','d','e','f'), rep(10,6)))
rat
data.frame(all=all, rat=rat)
tech <- factor(rep(c('Brad','Janet'), c(30,30)))
tech
df <- data.frame(uptake=all, rat=rat, tech=tech)
df
boxplot(rat ~ tech, data = df)
head(df)
boxplot(uptake ~ rat, data = df)
class(df$uptake)
a <- c(1.119,1.2996,1.5407,1.5084,1.6181,1.5962,1.2617,1.2288,1.3471,1.0206)
b <- c(1.045,1.1418,1.2569,0.6191,1.4823,0.8991,0.8365,1.2898,1.1821,0.9177)
c <- c(0.9873,0.9873,0.8714,0.9452,1.1186,1.2909,1.1502,1.1635,1.151,0.9367)
d <- c(1.3883,1.104,1.1581,1.319,1.1803,0.8738,1.387,1.301,1.3925,1.0832)
e <- c(1.3952,0.9714,1.3972,1.5369,1.3727,1.2909,1.1874,1.1374,1.0647,0.9486)
f <- c(1.2574,1.0295,1.1941,1.0759,1.3249,0.9494,1.1041,1.1575,1.294,1.4543)
all <- c(a, b, c, d, e, f)
rat <- factor(rep(c('a','b','c','d','e','f'), rep(10,6)))
tech <- factor(rep(c('Brad','Janet'), c(30,30)))
df <- data.frame(uptake=all, rat=rat, tech=tech)
class(df$uptake)
boxplot(uptake ~ rat, data = df)
boxplot(uptake ~ tech, data = df)
my_aov <- aov(uptake ~ rat + tech, data=df)
summary(my_aov)
?aov
summary(aov(uptake ~ rat/tech, data=df))
summary(aov(uptake ~ tech + rat %in% tech, data=df))
q()
quantile_normalisation <- function(df){
df_rank <- apply(df,2,rank,ties.method="min")
df_sorted <- data.frame(apply(df, 2, sort))
df_mean <- apply(df_sorted, 1, mean)
index_to_mean <- function(my_index, my_mean){
return(my_mean[my_index])
}
df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
rownames(df_final) <- rownames(df)
return(df_final)
}
?rank
quantile_normalisation <- function(df){
df_rank <- apply(df,2,rank,ties.method="average")
df_sorted <- data.frame(apply(df, 2, sort))
df_mean <- apply(df_sorted, 1, mean)
index_to_mean <- function(my_index, my_mean){
return(my_mean[my_index])
}
df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
rownames(df_final) <- rownames(df)
return(df_final)
}
df <- as.data.frame(matrix(data = c(2,4,4,5,5,14,4,7,4,8,6,9,3,8,5,8,3,9,3,5), nrow = 5, byrow = TRUE))
quantile_normalisation(df)
quantile_normalisation <- function(df){
df_rank <- apply(df,2,rank,ties.method="max")
df_sorted <- data.frame(apply(df, 2, sort))
df_mean <- apply(df_sorted, 1, mean)
index_to_mean <- function(my_index, my_mean){
return(my_mean[my_index])
}
df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
rownames(df_final) <- rownames(df)
return(df_final)
}
quantile_normalisation(df)
library(preprocessCore)
source('http://bioconductor.org/biocLite.R')
biocLite('preprocessCore')
library(preprocessCore)
normalize.quantiles(df)
normalize.quantiles(as.matrix(df))
quantile_normalisation <- function(df){
df_rank <- apply(df,2,rank,ties.method="first")
df_sorted <- data.frame(apply(df, 2, sort))
df_mean <- apply(df_sorted, 1, mean)
index_to_mean <- function(my_index, my_mean){
return(my_mean[my_index])
}
df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
rownames(df_final) <- rownames(df)
return(df_final)
}
quantile_normalisation(df)
q()
q()
?polygon
q()
library(slidify)
setwd("slidify_test")
publish('cage_r', 'davetang')
library(slidify)
getwd()
publish('cage_r', 'davetang')
library(CAGEr)
setwd("/Users/davetang/tmp/cage")
bam_file <- list.files(".", full.names=T, pattern="*.bam")
bam_file
cage_bam <- new("CAGEset", genomeName = "BSgenome.Hsapiens.UCSC.hg19", inputFiles = bam_file, inputFilesType = 'bam', sampleLabels = c('cell_1','cell_2','cytosol_1','cytosol_2','nucleus_1','nucleus_2'))
cage_bam
getCTSS(cage_bam, mappingQualityThreshold=10)
library(BSgenome.Hsapiens.UCSC.hg19)
source(http://bioconductor.org/biocLite.R)
source("http://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg19")
setwd("/Users/davetang/tmp/cage")
library(BSgenome.Hsapiens.UCSC.hg19)
bam_file <- list.files(".", full.names=T, pattern="*.bam")
bam_file
cage_bam <- new("CAGEset", genomeName = "BSgenome.Hsapiens.UCSC.hg19", inputFiles = bam_file, inputFilesType = 'bam', sampleLabels = c('cell_1','cell_2','cytosol_1','cytosol_2','nucleus_1','nucleus_2'))
cage_bam
getCTSS(cage_bam, mappingQualityThreshold=10)
library(slidify)
library(slidify)
setwd("/Users/davetang/slidify_test/")
setwd("/Users/davetang/slidify_test/")
setwd("/Users/davetang/slidify_test/")
publish('cage_r', 'davetang')
setwd("/Users/davetang/slidify_test/")
publish('cage_r', 'davetang')
publish('cage_r', 'davetang')
q()
